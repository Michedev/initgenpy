import argparse
from typing import List, Tuple

from path import Path
import re

class_function_regex = re.compile(r'(?<!\s )(?:class|def)\s+(?P<name>\w+)')

local_import_regex = re.compile(r'(?<!\s )from \.\w+ import (?P<name>\w+)')


def find_importable_elements_from_files(root: Path) -> List[Tuple[str, str]]:
    result = []
    for file in root.files('*.py'):
        with open(file) as f:
            content = f.read()
        for match in class_function_regex.finditer(content):
            name = match.group('name')
            if name is not None:
                result.append((file.basename().replace('.py', ''), name))
    return result


def find_importable_elements_from_subfolders(root: Path) -> List[Tuple[str, str]]:
    result = []
    for subdir in root.dirs():
        if not (subdir / '__init__.py').exists():
            continue
        with open(subdir / '__init__.py') as f:
            content = f.read()
        for match in local_import_regex.finditer(content):
            name = match.group('name')
            if name is not None:
                result.append((subdir.basename(), name))
    return result



def template_initpy(imports: List[Tuple[str, str]]):
    template = '# Auto-generated by initgen - Made by Mikedev\n'
    for fname, elname in imports:
        template += f'from .{fname} import {elname}\n'

    template += '\n__all__ = [' + ', '.join([elname for _, elname in imports]) + ']'
    return template


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--path', '-p', type=Path, required=False, dest='path', default=None)

    args = parser.parse_args()

    if args.path is None:
        args.path = Path('./').abspath()

    imports = find_importable_elements_from_files(args.path) + \
        find_importable_elements_from_subfolders(args.path)
    print('imports found:', '\n'.join([f'\t{a} - {b}' for a, b in imports]), sep='\n')
    init_content = template_initpy(imports)

    with open(args.path / '__init__.py', 'w') as f:
        f.write(init_content)


if __name__ == '__main__':
    main()
